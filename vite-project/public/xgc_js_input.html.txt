<!DOCTYPE html>
<html>
  <head>
    <title>XGC - Online Test with Java/JavaScript</title>
    <meta
      name="keywords"
      content="11P32, goldbach conjecture, goldbach problem, goldbach theorem, number theory, unsolved problems, additive questions involving primes"
    />
    <meta
      name="description"
      content="The main URL is https://mondotondo.com/goldbach"
    />

    <style>
      a.xgcLink1:link {
        color: blue;
        text-decoration: none;
      }
      a.xgcLink1:visited {
        color: navy;
        text-decoration: none;
      }
      a.xgcLink1:link:hover {
        text-decoration: underline;
      }
      a.xgcLink1:visited:hover {
        text-decoration: underline;
      }
      a.xgcLink1:active {
        color: red;
      }
    </style>

    <script language="JavaScript" src="XGC.js"></script>

    <script language="JavaScript">
      <!--- hide script from old browsers

      var styles = new Array();

      styles["Euclid"] =
        "border: thin dashed #C0C0C0; margin-top: 3pt; padding: 2pt 5pt 2pt 30pt; text-indent: -25pt";

      styles["Partition"] =
        "border: 1pt ridge; margin-top: 3pt; padding: 2pt 5pt 2pt 30pt; text-indent: -25pt";

      styles["Partition_Element"] = "";

      styles["Partition_Group"] =
        "border: 1pt ridge; margin-top: 3pt; padding: 2pt 5pt 2pt 30pt; text-indent: -25pt";

      function ShowInfo() {
        infoWin = window.open(
          "xgc_js_info.html",
          "",
          "directory=no, menubar=no, location=no, scrollbars=yes, resizable=yes, toolbar=yes, width=600, height=400"
        );
      }

      function wizard(name, how) {
        if (document.getElementById) {
          var element = document.getElementById(name);
          element.style.visibility = how;
        }
      }

      function outputClear() {
        parent.outputFrame.document.location = "xgc_js_output.html";
      }

      function makeLink(lnkClass, lnkOnClick, lnkContent) {
        var lnkStyle = ' style="' + styles[lnkClass] + '"';
        lnkOnClick = ' onclick="' + lnkOnClick + '"';
        return (
          '<a href="#"' + lnkOnClick + lnkStyle + ">" + lnkContent + "</div>"
        );
      }

      function makeDiv(divClass, divId, divContent) {
        var divStyle = ' style="' + styles[divClass] + '"';
        divId = ' id="' + divId + '"';
        return "<div" + divId + divStyle + ">" + divContent + "</div>";
      }

      function outputWrite(html, gotoId) {
        var doc = parent.outputFrame.document;
        doc.writeln(html);
        doc.location = "#" + gotoId;
      }

      function EuclidSetID() {
        return "e" + thisEuclidSet;
      }

      function LastID() {
        return ++lastID;
      }

      function EuclidSetHeader(thisResidue, thisModulus, thisTerms) {
        return (
          "<b>Euclid( " +
          thisResidue +
          ", " +
          thisModulus +
          " )</b> |<sub>" +
          thisTerms +
          "</sub>"
        );
      }

      function addOption() {
        var select = f.EuclidSets;
        thisEuclidSet = select.options.length;
        label =
          thisEuclidSet +
          ":" +
          "    " +
          euclidArray[thisEuclidSet].residue +
          "    " +
          euclidArray[thisEuclidSet].modulus +
          "    (" +
          euclidArray[thisEuclidSet].terms +
          ")";
        select.options[thisEuclidSet] = new Option(label, thisEuclidSet);
        select.options[thisEuclidSet].selected = true;
      }

      function getSelectedOption() {
        var select = f.EuclidSets;
        for (var i = 0; i < select.options.length; i++)
          if (select.options[i].selected) return select.options[i];
        return false;
      }

      function getCurrentIndex() {
        var selected = getSelectedOption();
        return selected == false ? false : parseInt(selected.value);
      }

      function copyCurrent() {
        thisEuclidSet = getCurrentIndex();
        //  readFields();
        if (thisEuclidSet === false) return false;
        outputEuclidSet(euclidArray[thisEuclidSet], LastID());
      }

      function findCurrent() {
        thisEuclidSet = getCurrentIndex();
        //  readFields();
        if (thisEuclidSet === false) return false;
        parent.outputFrame.document.location = "#e" + thisEuclidSet;
      }

      function outputEuclidSet(euclidSet, id) {
        var header = EuclidSetHeader(
          euclidSet.residue,
          euclidSet.modulus,
          euclidSet.terms
        );
        var body = "" + euclidSet.values;
        outputWrite(makeDiv("Euclid", id, header + " = " + body), id);
      }

      function readFields() {
        thisEuclidSet = getCurrentIndex();
        if (thisEuclidSet !== false) {
          thisResidue = euclidArray[thisEuclidSet].residue;
          thisModulus = euclidArray[thisEuclidSet].modulus;
          thisTerms = euclidArray[thisEuclidSet].terms;
        }
        thisNumber = parseInt(f.inputNumber.value);
        thisNumberTo = parseInt(f.inputNumberTo.value);
        thisCount = parseInt(f.inputCount.value);
      }

      function EuclidSetCompute() {
        var thisResidue = parseInt(f.inputResidue.value);
        var thisModulus = parseInt(f.inputModulus.value);
        var thisTerms = parseInt(f.inputTerms.value);

        if (thisResidue + thisModulus * thisTerms < xgc_maxFactorizable) {
          var euclidSet = new XGC_EuclidSet(
            thisResidue,
            thisModulus,
            thisTerms
          );
          euclidArray[euclidArray.length] = euclidSet;
          addOption();
          adjustFields("inputPartition");
          outputEuclidSet(euclidSet, EuclidSetID());
        } else {
          alert("Incorrect Euclid Set parameters.");
        }
      }

      function usingClause() {
        return (
          ' &nbsp;&nbsp; <nobr><font size="-1">using&nbsp;<a href="#' +
          EuclidSetID() +
          '">' +
          EuclidSetHeader(thisResidue, thisModulus, thisTerms) +
          "</a></font></nobr>"
        );
      }

      function PartitionLoop() {
        adjustFields("inputLoop");
        readFields();

        if (
          xgc_Divides(thisModulus, thisNumber) &&
          euclidArray[thisEuclidSet].values
        ) {
          var partition = new XGC_Partition(euclidArray[thisEuclidSet]);
          var id = LastID();
          var uClause = usingClause();
          var html = "";
          for (
            var number = thisNumber;
            number <= thisNumberTo;
            number += thisModulus
          ) {
            var html2 =
              "<b>" + number + "</b> = +" + partition.get(number) + uClause;
            html += makeDiv("Partition_Element", "", html2);
          }

          outputWrite(makeDiv("Partition_Group", id, html), id);
        } else {
          alert("Incorrect Partition parameters.");
        }
      }

      function PartitionCompute() {
        readFields();

        if (
          xgc_Divides(thisModulus, thisNumber) &&
          euclidArray[thisEuclidSet].values
        ) {
          var partition = new XGC_Partition(euclidArray[thisEuclidSet]);
          var id = LastID();
          var uClause = usingClause();
          var number = thisNumber;
          var html2 =
            "<b>" + number + "</b> = +" + partition.get(number) + uClause;

          outputWrite(makeDiv("Partition", id, html2), id);
        } else {
          alert("Incorrect Partition parameters.");
        }
      }

      function adjustFields(choice) {
        readFields();
        switch (choice) {
          case "inputCount":
            f.inputCount.value = (thisNumberTo - thisNumber) / thisModulus + 1;
            break;
          case "inputLoop":
            f.inputCount.value = thisCount <= 0 ? 5 : thisCount;
            f.inputNumberTo.value = thisNumber + thisModulus * (thisCount - 1);
            break;
          case "inputNumberTo":
            f.inputNumberTo.value = (thisCount - 1) * thisModulus + thisNumber;
            break;
          case "inputPartition":
            f.inputNumber.value = (thisResidue + thisModulus) * thisModulus;
            f.inputCount.value = thisCount <= 0 ? 5 : thisCount;
            f.inputNumberTo.value = thisNumber + thisModulus * (thisCount - 1);
            break;
        }
      }

      // end hiding from old browsers -->
    </script>
  </head>

  <body bgcolor="#E6E6E6">
    <font face="Verdana" size="4"><b>Test XGC</b></font
    ><br />
    <font face="Verdana" size="2"><b>with JavaScript</b></font>
    <hr />

    <font face="Verdana" size="1">
      <li>
        To test the Goldbach conjecture, keep Residue=1, Modulus=2 and change
        whatever else
      </li>
      <li>To test the eXtended Goldbach Conjecture, change everything</li>
    </font>

    <font face="Verdana" size="1">
      <form name="inputForm">
        <table border="0" style="border: 1pt white solid; padding: 2pt">
          <tr>
            <td width="60"></td>
            <td width="60"></td>
            <td width="60"></td>
          </tr>
          <tr align="left">
            <td colspan="3">
              <b>Euclid Set</b>
            </td>
          </tr>
          <tr>
            <td>Residue</td>
            <td>Modulus</td>
            <td></td>
          </tr>
          <tr>
            <td>
              <input
                name="inputResidue"
                type="TEXT"
                size="4"
                value="1"
                maxlength="20"
              />
            </td>
            <td>
              <input
                name="inputModulus"
                type="TEXT"
                size="4"
                value="2"
                maxlength="20"
              />
            </td>
            <td></td>
          </tr>
          <tr>
            <td>Terms</td>
            <td colspan="2"></td>
          </tr>
          <tr>
            <td>
              <input
                name="inputTerms"
                type="TEXT"
                size="4"
                value="100"
                maxlength="20"
              />
            </td>
            <td colspan="2">
              <input
                type="BUTTON"
                value="Compute"
                ONCLICK="EuclidSetCompute()"
              />
            </td>
          </tr>
        </table>

        <table
          border="0"
          style="border: 1pt white solid; padding: 2pt; margin-top: 3pt"
        >
          <tr>
            <td width="60"></td>
            <td width="60"></td>
            <td width="60"></td>
          </tr>
          <tr align="left">
            <td colspan="3">
              <b>Partition</b>
            </td>
          </tr>
          <tr align="left">
            <td colspan="3">
              Current Euclid Set &nbsp;&nbsp;&nbsp;<a
                href="#"
                onclick="copyCurrent(); return false;"
                class="xgcLink1"
                >copy</a
              >
              &nbsp;&nbsp;&nbsp;<a
                href="#"
                onclick="findCurrent(); return false;"
                class="xgcLink1"
                >find</a
              >
            </td>
          </tr>
          <tr align="left">
            <td colspan="3">
              <select name="EuclidSets"></select>
            </td>
          </tr>
          <tr>
            <td colspan="3">Number</td>
          </tr>
          <tr>
            <td>
              <input
                name="inputNumber"
                type="TEXT"
                size="4"
                value="6"
                maxlength="20"
              />
            </td>
            <td colspan="2">
              <input
                type="button"
                value="Compute"
                onclick="PartitionCompute()"
              />
            </td>
          </tr>
          <tr>
            <td>To</td>
            <td colspan="2">Count</td>
          </tr>
          <tr>
            <td>
              <input
                name="inputNumberTo"
                type="TEXT"
                size="4"
                value="8"
                maxlength="20"
                ONBLUR="adjustFields( 'inputCount' )"
              />
            </td>
            <td>
              <input
                name="inputCount"
                type="TEXT"
                size="4"
                value="2"
                maxlength="20"
                ONBLUR="adjustFields( 'inputNumberTo' )"
              />
            </td>
            <td>
              <input type="button" value="Loop" onclick="PartitionLoop()" />
            </td>
          </tr>
        </table>

        <table border="0" style="margin-top: 6pt">
          <tr>
            <td width="60"></td>
            <td width="60"></td>
            <td width="60"></td>
          </tr>
          <tr align="center">
            <td colspan="3">
              <div id="BottomLinks">
                <a href="#" onclick="ShowInfo(); return false;" class="xgcLink1"
                  >info</a
                >
                &nbsp;&nbsp;&nbsp;
                <a
                  href="#"
                  onclick="outputClear(); return false;"
                  class="xgcLink1"
                  >clear</a
                >
              </div>
            </td>
          </tr>
        </table>
      </form>
      <script language="JavaScript">
        <!--
        ////////////////////////////////////////////////////////////////////
        /* JAVASCRIPT GLOBAL VARIABLES                                    */
        ////////////////////////////////////////////////////////////////////
        var f = document.inputForm;

        var euclidArray = new Array();
        var thisResidue;
        var thisModulus;
        var thisTerms;
        var thisEuclidSet;
        var thisNumber;
        var thisNumberTo;
        var thisCount;
        var lastID = -1;

        ////////////////////////////////////////////////////////////////////
        //-->
      </script>
    </font>

    <script
      src="http://www.google-analytics.com/urchin.js"
      type="text/javascript"
    ></script>
    <script type="text/javascript">
      _uacct = "UA-754930-1";
      urchinTracker();
    </script>
  </body>
</html>
